// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TSM.Data.Application;

namespace TSM.Data.Application.Migrations
{
    [DbContext(typeof(TSMContext))]
    [Migration("20190801032123_InitAppData1")]
    partial class InitAppData1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TSM.Data.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("TSM.Data.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AreaId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TSM.Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TSM.Data.Entities.EducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EducationPrograms");
                });

            modelBuilder.Entity("TSM.Data.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AreaId");

                    b.Property<Guid?>("CityId");

                    b.Property<Guid?>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("District");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("SchoolId");

                    b.Property<string>("Street");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TSM.Data.Entities.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("TSM.Data.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("RatingType");

                    b.Property<Guid>("SchoolId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("TSM.Data.Entities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CoverUrl");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("SchoolType");

                    b.Property<int>("StudentCount");

                    b.Property<long>("TuiTion");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("TSM.Data.Entities.SchoolEducationProgram", b =>
                {
                    b.Property<Guid>("SchoolId");

                    b.Property<Guid>("EducationProgramId");

                    b.HasKey("SchoolId", "EducationProgramId");

                    b.HasIndex("EducationProgramId");

                    b.ToTable("SchoolEducationPrograms");
                });

            modelBuilder.Entity("TSM.Data.Entities.SchoolMajor", b =>
                {
                    b.Property<Guid>("SchoolId");

                    b.Property<Guid>("MajorId");

                    b.HasKey("SchoolId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("SchoolMajors");
                });

            modelBuilder.Entity("TSM.Data.Entities.Area", b =>
                {
                    b.HasOne("TSM.Data.Entities.Country", "Country")
                        .WithMany("Areas")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TSM.Data.Entities.City", b =>
                {
                    b.HasOne("TSM.Data.Entities.Area", "Area")
                        .WithMany("Cities")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TSM.Data.Entities.Location", b =>
                {
                    b.HasOne("TSM.Data.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("TSM.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("TSM.Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("TSM.Data.Entities.School", "School")
                        .WithOne("Location")
                        .HasForeignKey("TSM.Data.Entities.Location", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TSM.Data.Entities.Rating", b =>
                {
                    b.HasOne("TSM.Data.Entities.School", "School")
                        .WithMany("Ratings")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TSM.Data.Entities.SchoolEducationProgram", b =>
                {
                    b.HasOne("TSM.Data.Entities.EducationProgram", "EducationProgram")
                        .WithMany("SchoolEducationPrograms")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TSM.Data.Entities.School", "School")
                        .WithMany("SchoolEducationPrograms")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TSM.Data.Entities.SchoolMajor", b =>
                {
                    b.HasOne("TSM.Data.Entities.Major", "Major")
                        .WithMany("SchoolMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TSM.Data.Entities.School", "School")
                        .WithMany("SchoolMajors")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
